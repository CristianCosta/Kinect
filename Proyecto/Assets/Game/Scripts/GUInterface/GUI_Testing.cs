//------------------------------------------------------------------------------
// <auto-generated>
//     Este cÃ³digo fue generado por una herramienta.
//     VersiÃ³n de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrÃ­an causar un comportamiento incorrecto y se perderÃ¡n si
//     se vuelve a generar el cÃ³digo.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

using System;

using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Text;
using Sfs2X;
using Sfs2X.Core;
using Sfs2X.Entities;
using Sfs2X.Requests;
using Sfs2X.Logging;
using Sfs2X.Entities.Data;
using System;

namespace AssemblyCSharp
{

public class GUI_Testing : MonoBehaviour {

	public bool openWindow;
	private float maxWidth = 1000;
	private float maxHeight = 350;
	private Rect windowRect;
	private GUI_DetalleTarea ant;
	private Vector2 gameScrollPositionTests = new Vector2();
	private List<Test>  tests;
	private int roomSelection = -1;
	private bool[] allOptions;
	private Task task;
	private List<Test> aEjecutar= new List<Test>();


	void Start () {
	}

	void Update () {
	}

	void setAnterior(GUI_DetalleTarea anterior)
	{
		ant = anterior;
	}


	public void Mostrar(){
		openWindow = true;
	}

	public void setTask(Task t)
	{
		task = t;
		allOptions= new bool[t.getIdTests().Count];
	}

	void OnGUI(){
		GUISkin oldSkin = GUI.skin;
		GUI.skin = Skin.Instance.skin;
		if (openWindow){
			windowRect = new Rect(15,15,maxWidth,maxHeight);
			windowRect = GUI.Window(0,windowRect,doTestDetailWindow,"Testing");
		}       
			GUI.skin = oldSkin;
	}
	
	void doTestDetailWindow(int windowID){
		SetupTestList ();
		//Cargar los tests en area con barra deslizable

		//GUI.contentColor = Color.white;
		int heightActual = 50;
	    GUI.contentColor = Color.yellow;
		GUI.Label (new Rect (40, heightActual, 50, 30), "On/Off");
		GUI.Label (new Rect (100, heightActual, 50, 30), "ID Test");
		GUI.Label (new Rect (160, heightActual, 130, 30), "Estado" );
		GUI.Label (new Rect (300, heightActual, 270, 30), "Nombre de Clase");
		GUI.Label (new Rect (580, heightActual, 270, 30), "Nombre del Metodo" );
		GUI.contentColor = Color.white;
		heightActual += 30;
		gameScrollPositionTests = GUI.BeginScrollView (new Rect (0, heightActual, maxWidth-30 , maxHeight - 50 -heightActual ),gameScrollPositionTests,new Rect (0, 0, maxWidth-100 , tests.Count * 30));
		int height = 0;

		foreach(Test t in tests)
		{
			t.setToggle(GUI.Toggle(new Rect(40, height, 50, 30), t.getToggle(),""));
			GUI.Label (new Rect (100, height, 50, 30), t.getIdTest().ToString());
			GUI.Label (new Rect (160, height, 130, 30), t.getEstado());
			GUI.Label (new Rect (300, height, 270, 30), t.getClase());
			GUI.Label (new Rect (580, height, 270, 30), t.getMetodo());
			if (GUI.Button(new Rect (860, height ,50, 20),"Info")){
				GameObject g = new GameObject();
				g.AddComponent<GUI_InfoTesting>();
				g.SendMessage("setTest",t);
				g.SendMessage("setAnterior", this);
				g.SendMessage("Mostrar");
				openWindow = false;		
			}
			height += 30;
			
		}

		GUI.EndScrollView ();

		
		//Crear boton e-ecutar

		if (GUI.Button(new Rect (maxWidth / 2 - 320, maxHeight - 35, 300, 20),"Ejecutar")){
				aEjecutar.Clear();
				foreach(Test t in tests)
					if(t.getToggle().Equals(true)){
						aEjecutar.Add (t);
						t.setToggle(false);
					}
				TestUnityTestTools.Instance.ejecutarTests(aEjecutar);
				foreach (Test t in aEjecutar)
					t.getInfoTest().setEntorno("Tarea");
			
		}

		//Crear boton cerrar

		if (GUI.Button(new Rect(maxWidth/2+20,maxHeight-35,300,20),"Cerrar")){
			openWindow = false;
			try {
				this.ant.Mostrar();
			}
			catch{
				Debug.Log("Vuelve a la Tarea");
			}
			Destroy(this);
		}


	}
		public Test getTest(long id)
		{
			ArrayList Sprints = MultiPlayer.Instance.getListaSprints();
			foreach (Sprint s in Sprints)
				foreach( UserStory u in s.getListaStories())
					foreach (AcceptanceCriteria ac in u.getListaAcceptanceCriteria())
						foreach (Test t in ac.getAssociatedTests())
							if(t.getIdTest().Equals(id))
								return t;
			
			return null;
		}


		public void SetupTestList () {
			tests = new List<Test> ();
			ArrayList lista = task.getIdTests();
			foreach(long t in lista)
			{
				Test test=getTest(t);
				tests.Add(test);
			}

		}
		
		
		
	}
}
