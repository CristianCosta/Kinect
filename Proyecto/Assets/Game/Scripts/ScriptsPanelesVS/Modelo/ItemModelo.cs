//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Sfs2X.Entities.Data;
using System.Collections.Generic;
using AssemblyCSharp;
using Sfs2X.Requests;
using UnityEngine;

public abstract class  ItemModelo
{
	protected bool toggle = false;
	
	public abstract SFSObject toSFSObject();

	public abstract void fromSFSObject (SFSObject item);

	public abstract string getName ();

	public abstract string getInfo ();

	public abstract int getNumeroAtributos ();

	public abstract List<Test> getTests();

	public abstract List<EjecucionTest> ejecutarTests ();


	
	public void setToggle(bool t)
	{ 
		toggle = t;
	}
	
	public bool getToggle()
	{
		return toggle;
	}

	protected List<EjecucionTest>  getResultadosEjecucion (List<Test> tests)
	{
		List<EjecucionTest> resultado = new List<EjecucionTest> ();
		foreach (Test t in tests) 
			resultado.Add(t.getInfoTest());
		return resultado;
	}
	
	public List<EjecucionTest> historial()
	{
		List<EjecucionTest> lista = new List<EjecucionTest> ();
		List<Test> tests = this.getTests ();

		foreach (Test t in tests) {
			lista.AddRange(t.getHistorial());
		}
		return lista;
	}

	public virtual bool completo_y_correcto(DateTime tiempo_ultimo_cambio)
	{
		List<Test> tests = this.getTests ();
		foreach (Test t in tests) {
			if(DateTime.Compare(t.getHistorial()[t.getHistorial().Count-1].getFechaHora(), tiempo_ultimo_cambio) < 0)
				return false;
			else if ((DateTime.Compare(t.getHistorial()[t.getHistorial().Count-1].getFechaHora(), tiempo_ultimo_cambio) > 0) //ultimo historial despues de ultimo cambio
			         && (!t.getHistorial()[t.getHistorial().Count-1].getEstado().Equals("EXITO")))
				return false;
		}
		return true; //pasaron todos con exito y con fecha mayor a la del ultimo cambio

	}

	public void setHistoriales(){
		List<Test> tests = this.getTests ();
		foreach (Test t in tests)
			if(!t.HistorialCargado())
				MultiPlayer.Instance.getSmartFox ().Send (new ExtensionRequest ("obtenerHistorialTest", t.toSFSObject ()));
	}

}


