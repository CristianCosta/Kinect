//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace AssemblyCSharp
{
	public class GUI_InfoTesting : MonoBehaviour
	{
		public bool openWindow;
		private float maxWidth = 550;
		private float maxHeight = 400;
		private Rect windowRect;
		private GUI_Testing ant;	
		private Test test;
		private int roomSelection = -1;

		void Start () {
		}
		
		void Update () {
		}
		
		void setAnterior(GUI_Testing anterior)
		{
			ant = anterior;
		}
		
		
		public void Mostrar(){
			openWindow = true;
		}

		public void setTest(Test t)
		{
			test = t;
		}

		void OnGUI(){
			GUISkin oldSkin = GUI.skin;
			GUI.skin = Skin.Instance.skin;
			if (openWindow){
				windowRect = new Rect(200,15,maxWidth,maxHeight);
				windowRect = GUI.Window(0,windowRect,doInfoTestDetailWindow,"Informacion del Test "+test.getMetodo());
			}      
			GUI.skin = oldSkin;
		}

		void doInfoTestDetailWindow(int windowID){

			if (test.getInfoTest () != null) {
				EjecucionTest info = test.getInfoTest ();
				int heightActual = 30; 
				GUI.Label (new Rect (40, heightActual, 350, 30), "Nombre: " + info.getName ());
				heightActual += 30;
				GUI.Label (new Rect (40, heightActual, 350, 30), "Resultado: " + info.getEstado ());
				heightActual += 30;
				GUI.Label (new Rect (40, heightActual, 350, 30), "Demora en Ejecucion: " + info.getTime ());
				heightActual += 30;
				GUI.Label (new Rect (40, heightActual, 350, 30), "Entorno: " + info.getEntorno());
				heightActual += 30;
				GUI.Label (new Rect (40, heightActual, 350, 30), "Fecha y Hora: " + info.getFechaHora());
				heightActual += 30;
				if(!info.getMensaje().Equals(""))
					GUI.Label (new Rect (40, heightActual, 350, 90), "Mensaje resultante: " + info.getMensaje ());
				heightActual += 90;
				if(!info.getStacktrace().Equals(""))
					GUI.Label (new Rect (40, heightActual, 350, 90), "Stack-Trace: " + info.getStacktrace ());

			} else {
				GUI.contentColor = Color.yellow;
				GUI.Label(new Rect (maxWidth/2-150, 175, 350, 60), "Error: El Test " + test.getMetodo()+" no ha sido ejecutado.");
			
			}
			GUI.contentColor = Color.white;
			if (GUI.Button(new Rect(maxWidth/2-125,maxHeight-35,250,20),"Cerrar")){
				openWindow = false;
				try {
					this.ant.Mostrar();
				}
				catch{
					Debug.Log("Vuelve al Testing");
				}
				Destroy(this);
			}
		}
	}
}

